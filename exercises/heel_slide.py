from naoqi import ALProxy
import time

def heel_slide(tts, motion, posture):

    ### ========== custom motion ===========
    names = list()
    times = list()
    keys = list()

    names.append("HeadPitch")
    times.append([0, 1.16, 2.76, 5.16, 6.72, 8.08, 9.64])
    keys.append([[-0.0414601, [3, -0.0133333, 0], [3, 0.386667, 0]], [-0.0414601, [3, -0.386667, 0], [3, 0.533333, 0]], [-0.0414601, [3, -0.533333, 0], [3, 0.8, 0]], [-0.0414601, [3, -0.8, 0], [3, 0.52, 0]], [-0.0353239, [3, -0.52, 0], [3, 0.453333, 0]], [-0.046062, [3, -0.453333, 0.00333416], [3, 0.52, -0.00382448]], [-0.0567998, [3, -0.52, 0], [3, 0, 0]]])

    names.append("HeadYaw")
    times.append([0, 1.16, 2.76, 5.16, 6.72, 8.08, 9.64])
    keys.append([[-0.0567998, [3, -0.0133333, 0], [3, 0.386667, 0]], [-0.0567998, [3, -0.386667, 0], [3, 0.533333, 0]], [-0.0567998, [3, -0.533333, 0], [3, 0.8, 0]], [-0.0567998, [3, -0.8, 0], [3, 0.52, 0]], [-0.0521979, [3, -0.52, 0], [3, 0.453333, 0]], [-0.0521979, [3, -0.453333, 0], [3, 0.52, 0]], [-0.0521979, [3, -0.52, 0], [3, 0, 0]]])

    names.append("LAnklePitch")
    times.append([0, 1.16, 2.76, 5.16, 6.72, 8.08, 9.64])
    keys.append([[0.839057, [3, -0.0133333, 0], [3, 0.386667, 0]], [0.851328, [3, -0.386667, 0], [3, 0.533333, 0]], [0.851328, [3, -0.533333, 0], [3, 0.8, 0]], [0.851328, [3, -0.8, 0], [3, 0.52, 0]], [0.846726, [3, -0.52, 0], [3, 0.453333, 0]], [0.857465, [3, -0.453333, 0], [3, 0.52, 0]], [0.846726, [3, -0.52, 0], [3, 0, 0]]])

    names.append("LAnkleRoll")
    times.append([0, 1.16, 2.76, 5.16, 6.72, 8.08, 9.64])
    keys.append([[-0.0152981, [3, -0.0133333, 0], [3, 0.386667, 0]], [-0.0152981, [3, -0.386667, 0], [3, 0.533333, 0]], [-0.0152981, [3, -0.533333, 0], [3, 0.8, 0]], [-0.0152981, [3, -0.8, 0], [3, 0.52, 0]], [-0.0137641, [3, -0.52, 0], [3, 0.453333, 0]], [-0.0137641, [3, -0.453333, 0], [3, 0.52, 0]], [-0.0137641, [3, -0.52, 0], [3, 0, 0]]])

    names.append("LElbowRoll")
    times.append([0, 1.16, 2.76, 5.16, 6.72, 8.08, 9.64])
    keys.append([[-1.17654, [3, -0.0133333, 0], [3, 0.386667, 0]], [-0.716335, [3, -0.386667, -0.10638], [3, 0.533333, 0.146731]], [-0.417205, [3, -0.533333, 0], [3, 0.8, 0]], [-0.417205, [3, -0.8, 0], [3, 0.52, 0]], [-0.404934, [3, -0.52, 0], [3, 0.453333, 0]], [-0.704064, [3, -0.453333, 0.118125], [3, 0.52, -0.135496]], [-1.1658, [3, -0.52, 0], [3, 0, 0]]])

    names.append("LElbowYaw")
    times.append([0, 1.16, 2.76, 5.16, 6.72, 8.08, 9.64])
    keys.append([[-0.438765, [3, -0.0133333, 0], [3, 0.386667, 0]], [-0.46331, [3, -0.386667, 0], [3, 0.533333, 0]], [-0.331386, [3, -0.533333, 0], [3, 0.8, 0]], [-0.331386, [3, -0.8, 0], [3, 0.52, 0]], [-0.34826, [3, -0.52, 0.0168739], [3, 0.453333, -0.0147105]], [-0.434165, [3, -0.453333, 0.00802323], [3, 0.52, -0.00920312]], [-0.443368, [3, -0.52, 0], [3, 0, 0]]])

    names.append("LHand")
    times.append([0, 1.16, 2.76, 5.16, 6.72, 8.08, 9.64])
    keys.append([[0.2884, [3, -0.0133333, 0], [3, 0.386667, 0]], [0.2884, [3, -0.386667, 0], [3, 0.533333, 0]], [0.2884, [3, -0.533333, 0], [3, 0.8, 0]], [0.2884, [3, -0.8, 0], [3, 0.52, 0]], [0.2916, [3, -0.52, 0], [3, 0.453333, 0]], [0.2916, [3, -0.453333, 0], [3, 0.52, 0]], [0.2916, [3, -0.52, 0], [3, 0, 0]]])

    names.append("LHipPitch")
    times.append([0, 1.16, 2.76, 5.16, 6.72, 8.08, 9.64])
    keys.append([[-1.53089, [3, -0.0133333, 0], [3, 0.386667, 0]], [-1.53089, [3, -0.386667, 0], [3, 0.533333, 0]], [-1.52015, [3, -0.533333, 0], [3, 0.8, 0]], [-1.53089, [3, -0.8, 0], [3, 0.52, 0]], [-1.52629, [3, -0.52, 0], [3, 0.453333, 0]], [-1.52629, [3, -0.453333, 0], [3, 0.52, 0]], [-1.52629, [3, -0.52, 0], [3, 0, 0]]])

    names.append("LHipRoll")
    times.append([0, 1.16, 2.76, 5.16, 6.72, 8.08, 9.64])
    keys.append([[0.260822, [3, -0.0133333, 0], [3, 0.386667, 0]], [0.260822, [3, -0.386667, 0], [3, 0.533333, 0]], [0.260822, [3, -0.533333, 0], [3, 0.8, 0]], [0.260822, [3, -0.8, 0], [3, 0.52, 0]], [0.257754, [3, -0.52, 0], [3, 0.453333, 0]], [0.257754, [3, -0.453333, 0], [3, 0.52, 0]], [0.257754, [3, -0.52, 0], [3, 0, 0]]])

    names.append("LHipYawPitch")
    times.append([0, 1.16, 2.76, 5.16, 6.72, 8.08, 9.64])
    keys.append([[-0.598219, [3, -0.0133333, 0], [3, 0.386667, 0]], [-0.598219, [3, -0.386667, 0], [3, 0.533333, 0]], [-0.598219, [3, -0.533333, 0], [3, 0.8, 0]], [-0.598219, [3, -0.8, 0], [3, 0.52, 0]], [-0.59515, [3, -0.52, 0], [3, 0.453333, 0]], [-0.59515, [3, -0.453333, 0], [3, 0.52, 0]], [-0.59515, [3, -0.52, 0], [3, 0, 0]]])

    names.append("LKneePitch")
    times.append([0, 1.16, 2.76, 5.16, 6.72, 8.08, 9.64])
    keys.append([[1.40664, [3, -0.0133333, 0], [3, 0.386667, 0]], [1.3959, [3, -0.386667, 0], [3, 0.533333, 0]], [1.3959, [3, -0.533333, 0], [3, 0.8, 0]], [1.3959, [3, -0.8, 0], [3, 0.52, 0]], [1.39436, [3, -0.52, 0], [3, 0.453333, 0]], [1.39436, [3, -0.453333, 0], [3, 0.52, 0]], [1.40664, [3, -0.52, 0], [3, 0, 0]]])

    names.append("LShoulderPitch")
    times.append([0, 1.16, 2.76, 5.16, 6.72, 8.08, 9.64])
    keys.append([[0.903484, [3, -0.0133333, 0], [3, 0.386667, 0]], [0.61049, [3, -0.386667, 0], [3, 0.533333, 0]], [1.85762, [3, -0.533333, 0], [3, 0.8, 0]], [1.83155, [3, -0.8, 0], [3, 0.52, 0]], [1.83462, [3, -0.52, 0], [3, 0.453333, 0]], [0.671851, [3, -0.453333, 0], [3, 0.52, 0]], [0.906552, [3, -0.52, 0], [3, 0, 0]]])

    names.append("LShoulderRoll")
    times.append([0, 1.16, 2.76, 5.16, 6.72, 8.08, 9.64])
    keys.append([[0.249999, [3, -0.0133333, 0], [3, 0.386667, 0]], [0.891212, [3, -0.386667, 0], [3, 0.533333, 0]], [0.377323, [3, -0.533333, 0], [3, 0.8, 0]], [0.38806, [3, -0.8, -0.002789], [3, 0.52, 0.00181285]], [0.391128, [3, -0.52, -0.00306829], [3, 0.453333, 0.00267492]], [0.860533, [3, -0.453333, 0], [3, 0.52, 0]], [0.248467, [3, -0.52, 0], [3, 0, 0]]])

    names.append("LWristYaw")
    times.append([0, 1.16, 2.76, 5.16, 6.72, 8.08, 9.64])
    keys.append([[-0.0138481, [3, -0.0133333, 0], [3, 0.386667, 0]], [0.128814, [3, -0.386667, -0.030517], [3, 0.533333, 0.0420924]], [0.20398, [3, -0.533333, 0], [3, 0.8, 0]], [0.20398, [3, -0.8, 0], [3, 0.52, 0]], [0.184038, [3, -0.52, 0.00901488], [3, 0.453333, -0.00785913]], [0.153358, [3, -0.453333, 0.0297694], [3, 0.52, -0.0341472]], [-0.00771189, [3, -0.52, 0], [3, 0, 0]]])

    names.append("RAnklePitch")
    times.append([0, 1.16, 2.76, 5.16, 6.72, 8.08, 9.64])
    keys.append([[0.845275, [3, -0.0133333, 0], [3, 0.386667, 0]], [0.845275, [3, -0.386667, 0], [3, 0.533333, 0]], [0.845275, [3, -0.533333, 0], [3, 0.8, 0]], [0.572224, [3, -0.8, 0], [3, 0.52, 0]], [0.851412, [3, -0.52, 0], [3, 0.453333, 0]], [0.851412, [3, -0.453333, 0], [3, 0.52, 0]], [0.851412, [3, -0.52, 0], [3, 0, 0]]])

    names.append("RAnkleRoll")
    times.append([0, 1.16, 2.76, 5.16, 6.72, 8.08, 9.64])
    keys.append([[0.01845, [3, -0.0133333, 0], [3, 0.386667, 0]], [0.01845, [3, -0.386667, 0], [3, 0.533333, 0]], [0.01845, [3, -0.533333, 0], [3, 0.8, 0]], [0.0552659, [3, -0.8, 0], [3, 0.52, 0]], [0.0245859, [3, -0.52, 0], [3, 0.453333, 0]], [0.0245859, [3, -0.453333, 0], [3, 0.52, 0]], [0.0138481, [3, -0.52, 0], [3, 0, 0]]])

    names.append("RElbowRoll")
    times.append([0, 1.16, 2.76, 5.16, 6.72, 8.08, 9.64])
    keys.append([[1.21804, [3, -0.0133333, 0], [3, 0.386667, 0]], [0.80079, [3, -0.386667, 0.0906912], [3, 0.533333, -0.125091]], [0.570689, [3, -0.533333, 0], [3, 0.8, 0]], [0.587563, [3, -0.8, 0], [3, 0.52, 0]], [0.572224, [3, -0.52, 0], [3, 0.453333, 0]], [0.786985, [3, -0.453333, -0.09812], [3, 0.52, 0.112549]], [1.20423, [3, -0.52, 0], [3, 0, 0]]])

    names.append("RElbowYaw")
    times.append([0, 1.16, 2.76, 5.16, 6.72, 8.08, 9.64])
    keys.append([[0.489305, [3, -0.0133333, 0], [3, 0.386667, 0]], [0.538392, [3, -0.386667, 0], [3, 0.533333, 0]], [0.361981, [3, -0.533333, 0.0163619], [3, 0.8, -0.0245428]], [0.337438, [3, -0.8, 0], [3, 0.52, 0]], [0.34971, [3, -0.52, -0.0122714], [3, 0.453333, 0.0106982]], [0.513848, [3, -0.453333, 0], [3, 0.52, 0]], [0.472429, [3, -0.52, 0], [3, 0, 0]]])

    names.append("RHand")
    times.append([0, 1.16, 2.76, 5.16, 6.72, 8.08, 9.64])
    keys.append([[0.2952, [3, -0.0133333, 0], [3, 0.386667, 0]], [0.2952, [3, -0.386667, 0], [3, 0.533333, 0]], [0.2952, [3, -0.533333, 0], [3, 0.8, 0]], [0.2952, [3, -0.8, 0], [3, 0.52, 0]], [0.2892, [3, -0.52, 0], [3, 0.453333, 0]], [0.2892, [3, -0.453333, 0], [3, 0.52, 0]], [0.2892, [3, -0.52, 0], [3, 0, 0]]])

    names.append("RHipPitch")
    times.append([0, 1.16, 2.76, 5.16, 6.72, 8.08, 9.64])
    keys.append([[-1.53404, [3, -0.0133333, 0], [3, 0.386667, 0]], [-1.53711, [3, -0.386667, 0], [3, 0.533333, 0]], [-1.53251, [3, -0.533333, -0.00460248], [3, 0.8, 0.00690371]], [-0.857548, [3, -0.8, 0], [3, 0.52, 0]], [-1.52177, [3, -0.52, 0.0263943], [3, 0.453333, -0.0230104]], [-1.54478, [3, -0.453333, 0], [3, 0.52, 0]], [-1.52944, [3, -0.52, 0], [3, 0, 0]]])

    names.append("RHipRoll")
    times.append([0, 1.16, 2.76, 5.16, 6.72, 8.08, 9.64])
    keys.append([[-0.254602, [3, -0.0133333, 0], [3, 0.386667, 0]], [-0.254602, [3, -0.386667, 0], [3, 0.533333, 0]], [-0.254602, [3, -0.533333, 0], [3, 0.8, 0]], [-0.254602, [3, -0.8, 0], [3, 0.52, 0]], [-0.254602, [3, -0.52, 0], [3, 0.453333, 0]], [-0.254602, [3, -0.453333, 0], [3, 0.52, 0]], [-0.254602, [3, -0.52, 0], [3, 0, 0]]])

    names.append("RHipYawPitch")
    times.append([0, 1.16, 2.76, 5.16, 6.72, 8.08, 9.64])
    keys.append([[-0.598219, [3, -0.0133333, 0], [3, 0.386667, 0]], [-0.598219, [3, -0.386667, 0], [3, 0.533333, 0]], [-0.598219, [3, -0.533333, 0], [3, 0.8, 0]], [-0.598219, [3, -0.8, 0], [3, 0.52, 0]], [-0.59515, [3, -0.52, 0], [3, 0.453333, 0]], [-0.59515, [3, -0.453333, 0], [3, 0.52, 0]], [-0.59515, [3, -0.52, 0], [3, 0, 0]]])

    names.append("RKneePitch")
    times.append([0, 1.16, 2.76, 5.16, 6.72, 8.08, 9.64])
    keys.append([[1.40365, [3, -0.0133333, 0], [3, 0.386667, 0]], [1.40365, [3, -0.386667, 0], [3, 0.533333, 0]], [1.40365, [3, -0.533333, 0], [3, 0.8, 0]], [-0.0966001, [3, -0.8, 0], [3, 0.52, 0]], [1.40058, [3, -0.52, 0], [3, 0.453333, 0]], [1.40058, [3, -0.453333, 0], [3, 0.52, 0]], [1.40058, [3, -0.52, 0], [3, 0, 0]]])

    names.append("RShoulderPitch")
    times.append([0, 1.16, 2.76, 5.16, 6.72, 8.08, 9.64])
    keys.append([[0.925044, [3, -0.0133333, 0], [3, 0.386667, 0]], [0.636652, [3, -0.386667, 0], [3, 0.533333, 0]], [2.00345, [3, -0.533333, -0.0296589], [3, 0.8, 0.0444884]], [2.04793, [3, -0.8, 0], [3, 0.52, 0]], [2.04026, [3, -0.52, 0.00767936], [3, 0.453333, -0.00669482]], [0.70108, [3, -0.453333, 0], [3, 0.52, 0]], [0.929646, [3, -0.52, 0], [3, 0, 0]]])

    names.append("RShoulderRoll")
    times.append([0, 1.16, 2.76, 5.16, 6.72, 8.08, 9.64])
    keys.append([[-0.285367, [3, -0.0133333, 0], [3, 0.386667, 0]], [-1.0493, [3, -0.386667, 0], [3, 0.533333, 0]], [-0.457173, [3, -0.533333, -0.00715818], [3, 0.8, 0.0107373]], [-0.446436, [3, -0.8, 0], [3, 0.52, 0]], [-0.466378, [3, -0.52, 0.0199421], [3, 0.453333, -0.0173855]], [-1.02169, [3, -0.453333, 0], [3, 0.52, 0]], [-0.305309, [3, -0.52, 0], [3, 0, 0]]])

    names.append("RWristYaw")
    times.append([0, 1.16, 2.76, 5.16, 6.72, 8.08, 9.64])
    keys.append([[0.00302602, [3, -0.0133333, 0], [3, 0.386667, 0]], [-0.00771189, [3, -0.386667, 0.0107379], [3, 0.533333, -0.0148109]], [-0.270025, [3, -0.533333, 0], [3, 0.8, 0]], [-0.270025, [3, -0.8, 0], [3, 0.52, 0]], [-0.254685, [3, -0.52, -0.0153397], [3, 0.453333, 0.0133731]], [-0.039926, [3, -0.453333, -0.0280841], [3, 0.52, 0.0322141]], [-0.00771189, [3, -0.52, 0], [3, 0, 0]]])

    ### ============= behaviour logic ================

    tts.say("Now we will do the heel slide exercise. Get ready.")
    tts.say("Now slowly try to sit down on the without putting presure on your A C L")

    posture.goToPosture("Sit", 1.0)
    tts.say("Oh boy, I am getting too old for this")

    time.sleep(1.5)
    tts.say("Okay now let us try to do the heel slide, watch me and follow")

    time.sleep(1.0)
    tts.say("Do this only with your torn A C L leg")

    try:
        motion.angleInterpolationBezier(names, times, keys)
    except BaseException, err:
        print err

    tts.say("well done!")

    time.sleep(1.0)
    tts.say("Okay lets try to stand up now")
    posture.goToPosture("Stand", 1.0)

    time.sleep(0.5)
    tts.say("phew! nicely done!")

    return